#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/uart.h"
#include "driverlib/pin_map.h"

char keys[4][4] = {
    {'1','2','3','A'},
    {'4','5','6','B'},
    {'7','8','9','C'},
    {'*','0','#','D'}
};

#define PASSWORD "1234"
#define PASSWORD_LENGTH 4

char input[5]; // 4 digits + null
uint8_t input_index = 0;

// LED Init (PF3)
void LED_Init(void) {
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    GPIOUnlockPin(GPIO_PORTF_BASE, GPIO_PIN_3);
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_3);
    GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, 0); // OFF
}

// LED Blink 3 times
void LED_Blink(void) {
    for (int i = 0; i < 3; i++) {
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, GPIO_PIN_3); // ON
        SysCtlDelay(SysCtlClockGet() / 10); // 300 ms
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, 0); // OFF
        SysCtlDelay(SysCtlClockGet() / 10); // 300 ms
    }
}

// Keypad Init (PB0-PB7)
void Keypad_Init(void) {
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);

    GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE,
        GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7); // Rows
    GPIOPinWrite(GPIO_PORTB_BASE,
        GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7,
        GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);

    GPIOPinTypeGPIOInput(GPIO_PORTB_BASE,
        GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3); // Columns
    GPIOPadConfigSet(GPIO_PORTB_BASE,
        GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3,
        GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
}

// Scan Keypad
char Keypad_GetKey(void) {
    for (int row = 0; row < 4; row++) {
        GPIOPinWrite(GPIO_PORTB_BASE,
            GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7,
            GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7); // All HIGH

        GPIOPinWrite(GPIO_PORTB_BASE, (1 << (row + 4)), 0); // Set row LOW
        SysCtlDelay(10000); // debounce

        uint8_t cols = GPIOPinRead(GPIO_PORTB_BASE, 0x0F); // PB0-PB3

        for (int col = 0; col < 4; col++) {
            if (!(cols & (1 << col))) {
                while (!(GPIOPinRead(GPIO_PORTB_BASE, (1 << col)))); // Wait release
                return keys[row][col];
            }
        }
    }
    return 0;
}

// Reset buffer
void ResetInput(void) {
    input_index = 0;
    memset(input, 0, sizeof(input));
}

int main(void) {
    // Set system clock to 40 MHz
    SysCtlClockSet(SYSCTL_SYSDIV_5 | SYSCTL_USE_PLL |
                   SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);

    LED_Init();
    Keypad_Init();

    while (1) {
        char key = Keypad_GetKey();
        if (key) {
            input[input_index++] = key;

            if (input_index == PASSWORD_LENGTH) {
                input[input_index] = '\0'; // null terminate

                if (strcmp(input, PASSWORD) == 0) {
                    LED_Blink();  // Blink only if "1234"
                }

                ResetInput();  // Reset for next input
                SysCtlDelay(SysCtlClockGet() / 3); // wait before next try
            }

            SysCtlDelay(SysCtlClockGet() / 50); // debounce delay
        }
    }
}
